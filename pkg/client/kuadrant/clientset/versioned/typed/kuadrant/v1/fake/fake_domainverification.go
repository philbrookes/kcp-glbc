// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	kuadrantv1 "github.com/kuadrant/kcp-glbc/pkg/apis/kuadrant/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeDomainVerifications implements DomainVerificationInterface
type FakeDomainVerifications struct {
	Fake *FakeKuadrantV1
}

var domainverificationsResource = schema.GroupVersionResource{Group: "kuadrant.dev", Version: "v1", Resource: "domainverifications"}

var domainverificationsKind = schema.GroupVersionKind{Group: "kuadrant.dev", Version: "v1", Kind: "DomainVerification"}

// Get takes name of the domainVerification, and returns the corresponding domainVerification object, and an error if there is any.
func (c *FakeDomainVerifications) Get(ctx context.Context, name string, options v1.GetOptions) (result *kuadrantv1.DomainVerification, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(domainverificationsResource, name), &kuadrantv1.DomainVerification{})
	if obj == nil {
		return nil, err
	}
	return obj.(*kuadrantv1.DomainVerification), err
}

// List takes label and field selectors, and returns the list of DomainVerifications that match those selectors.
func (c *FakeDomainVerifications) List(ctx context.Context, opts v1.ListOptions) (result *kuadrantv1.DomainVerificationList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(domainverificationsResource, domainverificationsKind, opts), &kuadrantv1.DomainVerificationList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &kuadrantv1.DomainVerificationList{ListMeta: obj.(*kuadrantv1.DomainVerificationList).ListMeta}
	for _, item := range obj.(*kuadrantv1.DomainVerificationList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested domainVerifications.
func (c *FakeDomainVerifications) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(domainverificationsResource, opts))
}

// Create takes the representation of a domainVerification and creates it.  Returns the server's representation of the domainVerification, and an error, if there is any.
func (c *FakeDomainVerifications) Create(ctx context.Context, domainVerification *kuadrantv1.DomainVerification, opts v1.CreateOptions) (result *kuadrantv1.DomainVerification, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(domainverificationsResource, domainVerification), &kuadrantv1.DomainVerification{})
	if obj == nil {
		return nil, err
	}
	return obj.(*kuadrantv1.DomainVerification), err
}

// Update takes the representation of a domainVerification and updates it. Returns the server's representation of the domainVerification, and an error, if there is any.
func (c *FakeDomainVerifications) Update(ctx context.Context, domainVerification *kuadrantv1.DomainVerification, opts v1.UpdateOptions) (result *kuadrantv1.DomainVerification, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(domainverificationsResource, domainVerification), &kuadrantv1.DomainVerification{})
	if obj == nil {
		return nil, err
	}
	return obj.(*kuadrantv1.DomainVerification), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeDomainVerifications) UpdateStatus(ctx context.Context, domainVerification *kuadrantv1.DomainVerification, opts v1.UpdateOptions) (*kuadrantv1.DomainVerification, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(domainverificationsResource, "status", domainVerification), &kuadrantv1.DomainVerification{})
	if obj == nil {
		return nil, err
	}
	return obj.(*kuadrantv1.DomainVerification), err
}

// Delete takes name of the domainVerification and deletes it. Returns an error if one occurs.
func (c *FakeDomainVerifications) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(domainverificationsResource, name, opts), &kuadrantv1.DomainVerification{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeDomainVerifications) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(domainverificationsResource, listOpts)

	_, err := c.Fake.Invokes(action, &kuadrantv1.DomainVerificationList{})
	return err
}

// Patch applies the patch and returns the patched domainVerification.
func (c *FakeDomainVerifications) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *kuadrantv1.DomainVerification, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(domainverificationsResource, name, pt, data, subresources...), &kuadrantv1.DomainVerification{})
	if obj == nil {
		return nil, err
	}
	return obj.(*kuadrantv1.DomainVerification), err
}
